#+AUTHOR: BuddhiLW
#+STARTUP: latexpreview
#+PROPERTY: header-args:js :tangle ./src/Orgmode.js :mkdirp yes

* Testing Indium JS development environment.

#+begin_src js :tangle ./src/Orgmode.js :mkdirp yes
  // 🇧🇷 Let's Emacs like it's the 80's.:emacs:
  const F =
        x => (y => (x + y));
  console.log(F(5)(10));
#+end_src

* Let's implemente the Boolean Logic with λs!

#+begin_src js 
  const True = a => (b => a);
  const False = a => (b => b);
#+end_src

* The differences between Funcional and Imperative

** Defining the problem
Let's say we want to compute two behaviours together in a large running application.
- The first behaviour can be modeled as reciving an input $x$ and returning $x^2$.
- The second behaviour can be modled as reciving an input $x$ and returning $x+y$.

*** Imperative Approach
#+begin_src js
  var x = 5;
  var y = x ** 2;
  log.console(y);

  var z = x + y;
  log.console(z);

  var v = x + u;
  console.log(v);

  var u = x ** 2;
  console.log(u);
#+end_src

*** Functional Approach
#+begin_src js
  var Esq = x => x ** 2;
  var SumY = x => x + y;
  // comment
  console.log(Esq(5)); //=>25 
  console.log(SumY(5,5)); //=>30
#+end_src

** Now, our boss wants us to put these functionalities into production, composing one another
=Notice, he didn't especify how we should compose them=
*** Funtional
We will implement both, and ask him which one he wants implemented

#+begin_src js
  var EsqSum = Esq(SumY);
  var SumEsq = SumY(Esq);
#+end_src

**** Changes to how we had written our code (so not to mix with the imperative +junk+)
#+begin_src js
  var λEsq = λ => λ ** 2;
  var λSumY = λ => ((λ1) => λ + λ1);

  var λEsqSum = λ => λ1 => λEsq(λSumY(λ)(λ1));
  var λSumEsq = λ => λ1 => λSumY(λEsq(λ))(λ1);
#+end_src

**** Results
#+caption: What the funcional result looks like
#+ATTR_ORG: :width 300
[[file:../images/Functional/resultFuncional.png]]

*** Imperative
#+begin_src js
  var ImperativeEsqSum = (x + y)**2;
  log.console(ImperativeEsqSum);
  var ImperativeSumEsq = (x**2 + y);
  log.console(ImperativeSumEsq);
#+end_src

**** Results
#+caption: What the imperative result looks like
#+ATTR_ORG: :width 300
[[file:../images/Functional/resultImperative.png]]

#+caption: Do I call more variables, or do I change them?
#+ATTR_ORG: :width 300
[[file:../images/Functional/resultImperative2.png]]
